
                        API basics: what APIs are and how to use them

Make an API call: access an API from PHP
Decode API results: reading JSON in PHP
Use API data in a web application

    ================================================================================

                        HTTP basics: requests, responses and using cURL

Use cURL instead of file_get_contents to make an API request
Response codes: get the HTTP status code
Request headers: add meta data about the request
Response headers: read meta data about the response
Get all individual response headers in an array
Use an API that requires a specific request header
Request method: change the method to get a different result with the same URL
Request body: add a payload to send data along with the request

    ================================================================================

                        REST and RESTful APIs: using them from PHP
            
REST and RESTful APIs: what are they?
Access a RESTful API in PHP with cURL
Use the Guzzle HTTP client for object-oriented API code
Use an SDK: compare the Stripe API to its SDK

    ================================================================================

                    Create a RESTful API: build a framework for serving the API

Start writing the API: enable URL rewriting
The front controller: get the resource, ID and the request method
Use a client for API development: cURL, Postman or HTTPie
Set the HTTP status code: best practices
Add a controller class to decide the response
Use Composer's autoloader to load classes automatically
Make debugging easier: add type declarations and enable strict type checking
Always return JSON: add a generic exception handler and JSON Content-Type header
Send a 405 status code and Allow header for invalid request methods

    ================================================================================

                    Create a RESTful API: create a database and retrieve data from it
    
Create a new database and a database user to access it
Create a table to store resource data
Connect to the database from PHP: add a Database class
Move the database connection data to a separate .env file
Create a table data gateway class for the resource table
Show a list of all records
Configure PDO to prevent numeric values from being converted to strings
Convert database booleans to boolean literals in the JSON
Show an individual record
Respond with 404 if the resource with the specified ID is not found
    
    ================================================================================

                    Create a RESTful API: create, update and delete individual resources

Get the data from the request as JSON
Insert a record into the database and respond with a 201 status code
Add a generic error handler to output warnings as JSON
Validate the data and respond with a 422 status code if invalid
Conditionally validate the data when updating an existing record
Get the data from the request for updating an existing record
Update the record in the database and return a 200 status code
Delete the record in the database and return a 200 status code
    
    ================================================================================

                    API key authentication

Create a table to store user account data
Add a register page to insert a new user record and generate a new API key
Send the API key with the request: query string or request header
    